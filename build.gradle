import org.gradle.util.GradleVersion
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'groovy'
    alias(libs.plugins.kotlin)
    alias(libs.plugins.spotless)
    alias(libs.plugins.retry)
    // Publishing to Maven Central
    id 'org.jreleaser' version '1.16.0'
    id 'maven-publish'
    // Publishing to Gradle Plugin Portal
    id 'com.gradle.plugin-publish' version '1.3.1'
//    id 'signing'
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
}

tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "17"
    }
}

def ENV = System.getenv()
if (!ENV.CI) {
    version = "${version}.local"
}

// We must build against the version of Kotlin Gradle ships with.
def props = new Properties()
Project.class.getClassLoader().getResource("gradle-kotlin-dsl-versions.properties").openStream().withCloseable {
    props.load(it)
}
def kotlinVersion = props.getProperty("kotlin")
if (libs.versions.kotlin.get() != kotlinVersion) {
    throw new IllegalStateException("Requires Kotlin version: ${kotlinVersion}")
}

repositories {
    maven {
        name = 'Fabric'
        url = 'https://maven.fabricmc.net/'
    }
    mavenCentral()
}

configurations.configureEach {
    resolutionStrategy {
        failOnNonReproducibleResolution()
    }

    if (canBeConsumed) {
        attributes {
            attribute(GradlePluginApiVersion.GRADLE_PLUGIN_API_VERSION_ATTRIBUTE,
                objects.named(GradlePluginApiVersion, GradleVersion.current().getVersion()))
        }
    }
}

sourceSets {
    commonDecompiler {
        java {
            srcDir("src/decompilers/common")
        }
    }
    fernflower {
        java {
            srcDir("src/decompilers/fernflower")
        }
    }
    cfr {
        java {
            srcDir("src/decompilers/cfr")
        }
    }
    vineflower {
        java {
            srcDir("src/decompilers/vineflower")
        }
    }
}

dependencies {
    implementation gradleApi()

    // libraries
    implementation libs.commons.io
    implementation libs.gson
    implementation libs.guava
    implementation libs.bundles.asm

    // game handling utils
    implementation(libs.fabric.stitch) {
        exclude module: 'enigma'
    }

    // tinyfile management
    implementation libs.fabric.tiny.remapper
    implementation libs.fabric.access.widener
    implementation libs.fabric.mapping.io
    implementation(libs.fabric.lorenz.tiny) {
        transitive = false
    }

    implementation libs.fabric.loom.nativelib

    // decompilers
    fernflowerCompileOnly runtimeLibs.fernflower
    fernflowerCompileOnly libs.fabric.mapping.io

    cfrCompileOnly runtimeLibs.cfr
    cfrCompileOnly libs.fabric.mapping.io

    vineflowerCompileOnly runtimeLibs.vineflower
    vineflowerCompileOnly libs.fabric.mapping.io

    fernflowerApi sourceSets.commonDecompiler.output
    cfrApi sourceSets.commonDecompiler.output
    vineflowerApi sourceSets.commonDecompiler.output

    implementation sourceSets.commonDecompiler.output
    implementation sourceSets.fernflower.output
    implementation sourceSets.cfr.output
    implementation sourceSets.vineflower.output

    // source code remapping
    implementation libs.fabric.mercury

    // Kotlin
    implementation(libs.kotlin.metadata) {
        transitive = false
    }

    // Kapt integration
    compileOnly libs.kotlin.gradle.plugin

    // Testing
    testImplementation(gradleTestKit())
    testImplementation(testLibs.spock) {
        exclude module: 'groovy-all'
    }
    testImplementation testLibs.junit.jupiter.engine
    testRuntimeOnly testLibs.junit.platform.launcher
    testImplementation(testLibs.javalin) {
        exclude group: 'org.jetbrains.kotlin'
    }
    testImplementation testLibs.mockito
    testImplementation testLibs.java.debug

    compileOnly runtimeLibs.jetbrains.annotations
    testCompileOnly runtimeLibs.jetbrains.annotations

    testCompileOnly(testLibs.mixin) {
        transitive = false
    }
}

jar {
    manifest {
        attributes 'Implementation-Version': project.version
    }

    from sourceSets.commonDecompiler.output.classesDirs
    from sourceSets.cfr.output.classesDirs
    from sourceSets.fernflower.output.classesDirs
    from sourceSets.vineflower.output.classesDirs
}

base {
    archivesName = project.name
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    withSourcesJar()
    withJavadocJar()

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

spotless {
    setLineEndings(com.diffplug.spotless.LineEnding.UNIX)

    java {
        targetExclude("**/loom/util/DownloadUtil.java")
        targetExclude("**/generated/**")
        removeUnusedImports()
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
        licenseHeaderFile(rootProject.file("HEADER")).yearSeparator("-")
        //palantirJavaFormat()
    }

    groovy {
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
        importOrder('java', 'javax', '', 'net.fabricmc', '', 'dev.aoqia', '\\#')
        licenseHeaderFile(rootProject.file("HEADER")).yearSeparator("-")
        greclipse()
    }

    groovyGradle {
        target('src/**/*.gradle', '*.gradle')
        // Exclude build.gradle because it keeps pestering me about it!
        targetExclude("**/build.gradle")
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
        greclipse()
    }

    kotlin {
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
        licenseHeaderFile(rootProject.file("HEADER")).yearSeparator("-")
        targetExclude("**/build.gradle.kts")
        targetExclude("src/test/resources/projects/*/**")
        ktlint()
    }
}

//codenarc {
//    toolVersion = libs.versions.codenarc.get()
//    configFile = file("codenarc.groovy")
//}

gradlePlugin {
    website = project.url
    vcsUrl = project.url

    plugins {
        leafLoom {
            id = "${project.group}.${project.name}"
            displayName = project.name
            description = project.description
            tags.set(['projectzomboid', 'zomboid', 'leaf'])
            implementationClass = "${project.group}.${project.name}.LoomGradlePlugin"
        }
    }
}

// Because jreleaser 1.16.0 doesnt create the dir some reason
tasks.register('createJreleaserDir') {
    layout.buildDirectory.file('jreleaser').get().asFile.mkdirs()
}
tasks.named('jreleaserFullRelease').configure {
    dependsOn 'createJreleaserDir'
}
tasks.named('jreleaserConfig').configure {
    dependsOn 'createJreleaserDir'
}

publishing {
    publications.withType(MavenPublication) {
        pom {
            name = rootProject.name
            group = rootProject.group
            description = rootProject.description
            url = rootProject.url
            inceptionYear = '2025'
            packaging = 'jar'
            developers {
                developer {
                    id = 'aoqia'
                    name = 'aoqia'
                }
            }
            issueManagement {
                system = 'GitHub'
                url = "${rootProject.url}/issues"
            }
            licenses {
                license {
                    name = 'MIT'
                    url = 'https://spdx.org/licenses/MIT.html'
                }
            }
            scm {
                connection = "scm:git:https://github.com/aoqia194/" + project.name + "/.git"
                developerConnection = "scm:git:ssh://github.com/aoqia194/" + project.name + "/.git"
                url = rootProject.url
            }
        }
    }
    repositories {
        maven {
            url = layout.buildDirectory.dir("staging-deploy")
        }
    }
}

jreleaser {
    project {
        name = rootProject.name
        version = rootProject.version
        versionPattern = 'SEMVER'
        authors = ['aoqia194', 'FabricMC']
        maintainers = ['aoqia194']
        license = 'MIT'
        inceptionYear = '2025'
        links {
            homepage = rootProject.url
            license = 'https://spdx.org/licenses/MIT.html'
        }
    }
    signing {
        active = 'ALWAYS'
        armored = true
        passphrase = ENV.GPG_PASSPHRASE_KEY
        publicKey = ENV.GPG_PUBLIC_KEY
        secretKey = ENV.GPG_PRIVATE_KEY
    }
    deploy {
        maven {
            pomchecker {
                version = "1.14.0"
                failOnWarning = false // annoying
                failOnError = true
                strict = true
            }
            mavenCentral {
                sonatype {
                    applyMavenCentralRules = true
                    active = "ALWAYS"
                    snapshotSupported = true
                    authorization = 'BEARER'
                    username = ENV.MAVEN_USERNAME
                    password = ENV.MAVEN_PASSWORD
                    url = "https://central.sonatype.com/api/v1/publisher"
                    stagingRepository("build/staging-deploy")
                    verifyUrl = "https://repo1.maven.org/maven2/{{path}}/{{filename}}"
                    namespace = rootProject.group
					retryDelay = 60
					maxRetries = 30

                    // Override the plugin marker artifact to disable maven jar checks.
                    artifactOverride {
                        groupId = "${rootProject.group}.${rootProject.name}"
                        artifactId = "${rootProject.group}.${rootProject.name}.gradle.plugin"
                        jar = false
                        sourceJar = false
                        javadocJar = false
                        verifyPom = true
                    }
                }
            }
        }
    }
    release {
        github {
            releaseName = '{{tagName}}'
            sign = true
        }
    }
}

test {
    maxHeapSize = "2560m"
    jvmArgs "-XX:+HeapDumpOnOutOfMemoryError"
    useJUnitPlatform()

    // Forward system prop onto tests.
    if (System.getProperty("loom.test.homeDir")) {
        systemProperty "loom.test.homeDir", System.getProperty("loom.test.homeDir")
    }


    if (ENV.CI) {
        retry {
            maxRetries = 3
        }
    }
}

// Workaround https://github.com/gradle/gradle/issues/25898
tasks.withType(Test).configureEach {
    jvmArgs = [
        '--add-opens=java.base/java.lang=ALL-UNNAMED',
        '--add-opens=java.base/java.util=ALL-UNNAMED',
        '--add-opens=java.base/java.lang.invoke=ALL-UNNAMED',
        '--add-opens=java.base/java.net=ALL-UNNAMED'
    ]
}

// A task to output a json file with a list of all the test to run
tasks.register('writeActionsTestMatrix') {
    doLast {
        def testMatrix = []
        file('src/test/groovy/dev/aoqia/loom/test/integration').eachFile {
            if (it.name.endsWith("Test.groovy")) {
                if (it.name.endsWith("ReproducibleBuildTest.groovy")) {
                    // This test gets a special case to run across all os's
                    return
                }

                if (it.name.endsWith("DebugLineNumbersTest.groovy")) {
                    // Known flakey test
                    return
                }

                def className = it.name.replace(".groovy", "")
                testMatrix.add("dev.aoqia.leaf.loom.test.integration.${className}")
            }
        }

        // Run all the unit tests together
        testMatrix.add("dev.aoqia.leaf.loom.test.unit.*")

        // Kotlin tests
        testMatrix.add("dev.aoqia.leaf.loom.test.kotlin.*")

        def json = groovy.json.JsonOutput.toJson(testMatrix)
        def output = file("build/test_matrix.json")
        output.parentFile.mkdir()
        output.text = json
    }
}

tasks.named('wrapper') {
    distributionType = Wrapper.DistributionType.ALL
}

/**
 * Run this task to download the gradle sources next to the api jar, you may need to manually attach the sources jar
 */
tasks.register('downloadGradleSources') {
    doLast {
        // Awful hack to find the gradle api location
        def gradleApiFile = project.configurations.detachedConfiguration(dependencies.gradleApi()).files.stream()
            .find {
                it.name.startsWith("gradle-api")
            }

        def gradleApiSources = new File(gradleApiFile.absolutePath.replace(".jar", "-sources.jar"))
        def url = "https://services.gradle.org/distributions/gradle-${GradleVersion.current().getVersion()}-src.zip"

        gradleApiSources.delete()

        println("Downloading (${url}) to (${gradleApiSources})")
        gradleApiSources << new URL(url).newInputStream()
    }
}

tasks.register('printActionsTestName', PrintActionsTestName) {
}

/**
 * Replaces invalid characters in test names for GitHub Actions artifacts.
 */
abstract class PrintActionsTestName extends DefaultTask {
    @Input
    @Option(option = "name", description = "The test name")
    String testName

    @TaskAction
    def run() {
        def sanitised = testName.replace('*', '_')
        new File(System.getenv().GITHUB_OUTPUT) << "\ntest=$sanitised"
    }
}

apply from: rootProject.file('gradle/versions.gradle')
